- name: Install Ruby dependencies
  apt:
    name:
      - git-core
      - curl
      - zlib1g-dev
      - build-essential
      - libssl-dev
      - libreadline-dev
      - libyaml-dev
      - libsqlite3-dev
      - sqlite3
    state: present

- name: Log in as deploy user and setup rbenv
  become_user: "{{ deploy_user }}"
  block:
  - name: Clone rbenv
    git:
      repo: https://github.com/rbenv/rbenv.git
      dest: ~{{ deploy_user }}/.rbenv
      clone: yes

  - name: Add Rbenv path to .bashrc
    lineinfile:
      dest: "/home/{{ deploy_user }}/.bashrc"
      regexp: 'export PATH="\$HOME/.rbenv/bin:\$PATH"'
      line: 'export PATH="$HOME/.rbenv/bin:$PATH"'
      state: present

  - name: Add Rbenv eval init to .bashrc
    lineinfile:
      dest: "/home/{{ deploy_user }}/.bashrc"
      regexp: 'eval "\$\(rbenv init -\)"'
      line: 'eval "$(rbenv init -)"'
      state: present

  - name: Clone rbenv build
    git:
      repo: https://github.com/rbenv/ruby-build.git
      dest: ~{{ deploy_user }}/.rbenv/plugins/ruby-build
      clone: yes

  - name: Add Rbenv build to .bashrc
    lineinfile:
      dest: "/home/{{ deploy_user }}/.bashrc"
      regexp: 'export PATH="\$HOME/.rbenv/plugins/ruby-build/bin:\$PATH"'
      line: 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"'
      state: present

  - name: Clone rbenv vars
    git:
      repo: https://github.com/rbenv/rbenv-vars.git
      dest: ~{{ deploy_user }}/.rbenv/plugins/rbenv-vars
      clone: yes

  - name: source bashrc
    shell: . /home/{{ deploy_user }}/.bashrc

  - name: Check if Ruby {{ ruby_version }} is installed
    command: "/home/{{ deploy_user }}/.rbenv/bin/rbenv versions --bare"
    register: rbenv_versions
    changed_when: false
    failed_when: false  # âœ… Prevents Ansible from treating missing Ruby as an error

  - name: Install Ruby {{ ruby_version }} if not installed
    command: "/home/{{ deploy_user }}/.rbenv/bin/rbenv install --verbose {{ ruby_version }}"
    when: ruby_version not in rbenv_versions.stdout_lines
    async: 3600
    poll: 10

  - name: check if current system ruby version is {{ ruby_version }}
    shell: "/home/{{ deploy_user }}/.rbenv/bin/rbenv version | cut -d ' ' -f 1 | grep -Fx '{{ ruby_version }}'"
    register: current_ruby_selected
    changed_when: false
    ignore_errors: yes
    check_mode: no

  - name: rbenv set global ruby version and rehash
    command: "/home/{{ deploy_user }}/.rbenv/bin/rbenv global {{ruby_version}} && rbenv rehash"
    when:
      - current_ruby_selected.rc != 0

  - name: Create rbenv directory
    file:
      path: "/home/{{ deploy_user }}/{{ app_name }}"
      state: directory

  - name: Update rbenv vars
    template:
      src: rbenv.j2
      dest: "/home/{{ deploy_user }}/{{ app_name }}/.rbenv-vars"

  - name: Create shared config directory
    file:
      path: "/home/{{ deploy_user }}/{{ app_name }}/shared/config"
      state: directory

  - name: Update master key
    template:
      src: master.key.j2
      dest: "/home/{{ deploy_user }}/{{ app_name }}/shared/config/master.key"

  - name: 'install bundler v2'
    command: "/home/{{ deploy_user }}/.rbenv/shims/gem install bundler"

- name: Restart nginx service
  service:
    name: nginx
    state: restarted

- name: Update /etc/environment
  template:
    src: env.j2
    dest: "{{env_path}}"
